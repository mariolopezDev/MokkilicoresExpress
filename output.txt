Directorio: Controllers
  Archivo: AccountController.cs
    Contenido:
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Mvc;
using MokkilicoresExpress.Models;
using System.Security.Claims;
using Microsoft.Extensions.Caching.Memory;


namespace MokkilicoresExpress.Controllers
{
    public class AccountController : Controller
    {
        private readonly IMemoryCache _cache;
        private const string ClienteCacheKey = "Clientes";

        public AccountController(IMemoryCache cache)
        {
            _cache = cache;
        }

        [HttpGet]
        public IActionResult Login()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Login(string clientId, string password)
        {
            var clientes = _cache.Get<List<Cliente>>(ClienteCacheKey);
            var cliente = clientes?.FirstOrDefault(c => c.Identificacion == clientId);
            if (cliente == null || !ValidatePassword(cliente, password))
            {
                ViewBag.ErrorMessage = "Credenciales inválidas";
                return View();
            }

            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, $"{cliente.Nombre} {cliente.Apellido}"),
                new Claim(ClaimTypes.NameIdentifier, cliente.Identificacion)
            };

            var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);

            await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, new ClaimsPrincipal(claimsIdentity));

            return RedirectToAction("Index", "Home");
        }

        [HttpPost]
        public async Task<IActionResult> Logout()
        {
            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
            return RedirectToAction("Index", "Home");
        }

        private bool ValidatePassword(Cliente cliente, string password)
        {
            var expectedPassword = cliente.Identificacion + cliente.Nombre.Substring(0, 2).ToLower() + cliente.Apellido[0].ToString().ToUpper();
            return password == expectedPassword;
        }
    }
}

  Archivo: ClienteController.cs
    Contenido:
using Microsoft.AspNetCore.Mvc;
using MokkilicoresExpress.Models;
using Microsoft.Extensions.Caching.Memory;

namespace MokkilicoresExpress.Controllers
{
    public class ClienteController : Controller
    {
        private readonly IMemoryCache _cache;
        private const string ClienteCacheKey = "Clientes";

        public ClienteController(IMemoryCache cache)
        {
            _cache = cache;
        }

        public IActionResult Index()
        {
            var clientes = _cache.GetOrCreate(ClienteCacheKey, entry => new List<Cliente>());
            return View(clientes);
        }

        public IActionResult Create()
        {
            return View();
        }

        [HttpPost]
        public IActionResult Create(Cliente cliente)
        {
            var clientes = _cache.Get<List<Cliente>>(ClienteCacheKey);
            clientes.Add(cliente);
            _cache.Set(ClienteCacheKey, clientes);
            return RedirectToAction(nameof(Index));
        }

        public IActionResult Details(string id)
        {
            var clientes = _cache.Get<List<Cliente>>(ClienteCacheKey);
            var cliente = clientes?.FirstOrDefault(c => c.Identificacion == id);
            if (cliente == null)
            {
                return NotFound();
            }
            return View(cliente);
        }

        public IActionResult Edit(string id)
        {
            var clientes = _cache.Get<List<Cliente>>(ClienteCacheKey);
            var cliente = clientes?.FirstOrDefault(c => c.Identificacion == id);
            if (cliente == null)
            {
                return NotFound();
            }
            return View(cliente);
        }

        [HttpPost]
        public IActionResult Edit(Cliente cliente)
        {
            var clientes = _cache.Get<List<Cliente>>(ClienteCacheKey);
            var existingCliente = clientes?.FirstOrDefault(c => c.Identificacion == cliente.Identificacion);
            if (existingCliente != null)
            {
                existingCliente.Nombre = cliente.Nombre;
                existingCliente.Apellido = cliente.Apellido;
                existingCliente.Provincia = cliente.Provincia;
                existingCliente.Canton = cliente.Canton;
                existingCliente.Distrito = cliente.Distrito;
                existingCliente.DineroCompradoTotal = cliente.DineroCompradoTotal;
                existingCliente.DineroCompradoUltimoAnio = cliente.DineroCompradoUltimoAnio;
                existingCliente.DineroCompradoUltimosSeisMeses = cliente.DineroCompradoUltimosSeisMeses;
                _cache.Set(ClienteCacheKey, clientes, new MemoryCacheEntryOptions().SetSlidingExpiration(TimeSpan.FromMinutes(60)));
                return RedirectToAction(nameof(Index));
            }

            ModelState.AddModelError("", "Cliente no encontrado");
            return View(cliente);
        }

        public IActionResult Delete(string id)
        {
            var clientes = _cache.Get<List<Cliente>>(ClienteCacheKey);
            var cliente = clientes?.FirstOrDefault(c => c.Identificacion == id);
            if (cliente != null)
            {
                clientes.Remove(cliente);
                _cache.Set(ClienteCacheKey, clientes, new MemoryCacheEntryOptions().SetSlidingExpiration(TimeSpan.FromMinutes(60)));
                return RedirectToAction(nameof(Index));
            }

            ModelState.AddModelError("", "Cliente no encontrado");
            return RedirectToAction(nameof(Index), new { error = "ClienteNotFound" });
        }

        public IActionResult Search(string searchTerm)
        {
            var clientes = _cache.Get<List<Cliente>>(ClienteCacheKey);
            var filteredClientes = string.IsNullOrWhiteSpace(searchTerm)
                ? clientes
                : clientes.Where(c => c.Nombre.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                            || c.Apellido.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                            || c.Identificacion.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

            if (HttpContext.Request.Headers["X-Requested-With"] == "XMLHttpRequest")
            {
                return Json(filteredClientes);
            }

            return View("Index", filteredClientes);
        }
    }
}

  Archivo: HomeController.cs
    Contenido:
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using MokkilicoresExpress.Models;

namespace MokkilicoresExpress.Controllers;

public class HomeController : Controller
{
    private readonly ILogger<HomeController> _logger;

    public HomeController(ILogger<HomeController> logger)
    {
        _logger = logger;
    }

    public IActionResult Index()
    {
        return View();
    }

    public IActionResult Privacy()
    {
        return View();
    }

    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
    public IActionResult Error()
    {
        return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
    }
}
  Archivo: InventarioController.cs
    Contenido:
using Microsoft.AspNetCore.Mvc;
using MokkilicoresExpress.Models;
using Microsoft.AspNetCore.Authorization;

using Microsoft.Extensions.Caching.Memory;


namespace MokkilicoresExpress.Controllers
{
    public class InventarioController : Controller
    {
        private readonly IMemoryCache _cache;
        private const string InventarioCacheKey = "Inventario";

        public InventarioController(IMemoryCache cache)
        {
            _cache = cache;

            // Inicializar el inventario en la caché si aún no está presente
            if (!_cache.TryGetValue(InventarioCacheKey, out List<Inventario> _))
            {
                List<Inventario> initialInventario = new List<Inventario>
                {
                    new Inventario { Id = 1, CantidadEnExistencia = 100, BodegaId = 1, FechaIngreso = DateTime.Now, FechaVencimiento = DateTime.Now.AddYears(1), TipoLicor = "Vodka" },
                    new Inventario { Id = 2, CantidadEnExistencia = 150, BodegaId = 2, FechaIngreso = DateTime.Now, FechaVencimiento = DateTime.Now.AddYears(1), TipoLicor = "Whiskey" }
                };
                _cache.Set(InventarioCacheKey, initialInventario, new MemoryCacheEntryOptions().SetSlidingExpiration(TimeSpan.FromMinutes(60)));
            }
        }

        public IActionResult Index()
        {
            var inventario = _cache.Get<List<Inventario>>(InventarioCacheKey);
            return View(inventario);
        }

        public IActionResult Create()
        {
            return View();
        }

        [HttpPost]
        [Authorize]
        public IActionResult Create(Inventario inventario)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return RedirectToAction("Login", "Account");
            }
            if (ModelState.IsValid)
            {
                var inventarioList = _cache.Get<List<Inventario>>(InventarioCacheKey);
                inventarioList.Add(inventario);
                _cache.Set(InventarioCacheKey, inventarioList, new MemoryCacheEntryOptions().SetSlidingExpiration(TimeSpan.FromMinutes(60)));
                return RedirectToAction(nameof(Index));
            }
            return View(inventario);
        }

        public IActionResult Details(int id)
        {
            var inventario = _cache.Get<List<Inventario>>(InventarioCacheKey);
            var item = inventario.FirstOrDefault(x => x.Id == id);
            if (item == null)
            {
                return NotFound();
            }
            return View(item);
        }

        public IActionResult Edit(int id)
        {
            var inventario = _cache.Get<List<Inventario>>(InventarioCacheKey);
            var item = inventario.FirstOrDefault(x => x.Id == id);
            if (item == null)
            {
                return NotFound();
            }
            return View(item);
        }

        [HttpPost]
        public IActionResult Edit(Inventario inventario)
        {
            var inventarioList = _cache.Get<List<Inventario>>(InventarioCacheKey);
            var index = inventarioList.FindIndex(i => i.Id == inventario.Id);
            if (index != -1)
            {
                inventarioList[index] = inventario; // Actualiza el elemento en la lista
                _cache.Set(InventarioCacheKey, inventarioList, new MemoryCacheEntryOptions().SetSlidingExpiration(TimeSpan.FromMinutes(60)));
                return RedirectToAction(nameof(Index));
            }
            return NotFound();
        }

        public IActionResult Delete(int id)
        {
            var inventarioList = _cache.Get<List<Inventario>>(InventarioCacheKey);
            var itemIndex = inventarioList.FindIndex(i => i.Id == id);
            if (itemIndex != -1)
            {
                inventarioList.RemoveAt(itemIndex);
                _cache.Set(InventarioCacheKey, inventarioList, new MemoryCacheEntryOptions().SetSlidingExpiration(TimeSpan.FromMinutes(60)));
                return RedirectToAction(nameof(Index));
            }
            return NotFound();
        }

        // Procesa la búsqueda de un artículo de inventario
        public IActionResult Search(string searchTerm)
        {
            // Obtener la lista de inventario desde la caché
            var inventarioList = _cache.Get<List<Inventario>>(InventarioCacheKey);

            // Filtrar los elementos basados en el término de búsqueda, ignorando mayúsculas y minúsculas
            var filteredItems = string.IsNullOrWhiteSpace(searchTerm)
                ? inventarioList
                : inventarioList.Where(i => i.TipoLicor.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

            // Verificar si la solicitud es un AJAX request para devolver JSON
            if (HttpContext.Request.Headers["X-Requested-With"] == "XMLHttpRequest")
            {
                return Json(filteredItems);
            }

            // Devolver la vista 'Index' con los elementos filtrados
            return View("Index", filteredItems);
        }

    }
}

  Archivo: PedidoController.cs
    Contenido:
using Microsoft.AspNetCore.Mvc;
using MokkilicoresExpress.Models;
using Microsoft.Extensions.Caching.Memory;
using Microsoft.AspNetCore.Authorization;



namespace MokkilicoresExpress.Controllers
{
    public class PedidoController : Controller
    {
        private readonly IMemoryCache _cache;
        private const string PedidoCacheKey = "Pedidos";

        public PedidoController(IMemoryCache cache)
        {
            _cache = cache;

            if (!_cache.TryGetValue(PedidoCacheKey, out List<Pedido> _))
            {
                List<Pedido> initialPedidos = new List<Pedido>
                {
                    new Pedido { Id = 1, ProductoId = "P001", Cantidad = 10, CostoSinIVA = 1000, Estado = "Pendiente" },
                    new Pedido { Id = 2, ProductoId = "P002", Cantidad = 20, CostoSinIVA = 2000, Estado = "Entregado" }
                };
                _cache.Set(PedidoCacheKey, initialPedidos, new MemoryCacheEntryOptions().SetSlidingExpiration(TimeSpan.FromMinutes(60)));
            }
        }

        public IActionResult Index()
        {
            var pedidos = _cache.GetOrCreate(PedidoCacheKey, entry => new List<Pedido>());
            return View(pedidos);
        }

        public IActionResult Create()
        {
            return View();
        }


        [HttpPost]
        [Authorize]
        public IActionResult Create(Pedido pedido)
        {
            if (!User.Identity.IsAuthenticated)
            {
                return RedirectToAction("Login", "Account");
            }
            if (ModelState.IsValid)
            {
                var pedidos = _cache.Get<List<Pedido>>(PedidoCacheKey);
                pedidos.Add(pedido);
                _cache.Set(PedidoCacheKey, pedidos, new MemoryCacheEntryOptions().SetSlidingExpiration(TimeSpan.FromMinutes(60)));
                return RedirectToAction(nameof(Index));
            }
            return View(pedido);
        }

        public IActionResult Details(int id)
        {
            var pedidos = _cache.Get<List<Pedido>>(PedidoCacheKey);
            var pedido = pedidos?.FirstOrDefault(p => p.Id == id);
            if (pedido == null)
            {
                return NotFound();
            }
            return View(pedido);
        }

        public IActionResult Edit(int id)
        {
            var pedidos = _cache.Get<List<Pedido>>(PedidoCacheKey);
            var pedido = pedidos?.FirstOrDefault(p => p.Id == id);
            if (pedido == null)
            {
                return NotFound();
            }
            return View(pedido);
        }

        [HttpPost]
        public IActionResult Edit(Pedido pedido)
        {
            if (ModelState.IsValid)
            {
                var pedidos = _cache.Get<List<Pedido>>(PedidoCacheKey);
                var existingPedido = pedidos?.FirstOrDefault(p => p.Id == pedido.Id);
                if (existingPedido != null)
                {
                    existingPedido.ProductoId = pedido.ProductoId;
                    existingPedido.Cantidad = pedido.Cantidad;
                    existingPedido.CostoSinIVA = pedido.CostoSinIVA;
                    existingPedido.Estado = pedido.Estado;
                    _cache.Set(PedidoCacheKey, pedidos, new MemoryCacheEntryOptions().SetSlidingExpiration(TimeSpan.FromMinutes(60)));
                    return RedirectToAction(nameof(Index));
                }
                ModelState.AddModelError("", "Pedido no encontrado");
            }
            return View(pedido);
        }

        public IActionResult Delete(int id)
        {
            var pedidos = _cache.Get<List<Pedido>>(PedidoCacheKey);
            var pedido = pedidos?.FirstOrDefault(p => p.Id == id);
            if (pedido != null)
            {
                pedidos.Remove(pedido);
                _cache.Set(PedidoCacheKey, pedidos, new MemoryCacheEntryOptions().SetSlidingExpiration(TimeSpan.FromMinutes(60)));
                return RedirectToAction(nameof(Index));
            }
            ModelState.AddModelError("", "Pedido no encontrado");
            return RedirectToAction(nameof(Index), new { error = "PedidoNotFound" });
        }

        public IActionResult Search(string searchTerm)
        {
            var pedidos = _cache.Get<List<Pedido>>(PedidoCacheKey);
            var filteredPedidos = string.IsNullOrWhiteSpace(searchTerm)
                ? pedidos
                : pedidos.Where(p => p.ProductoId.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
                    || p.Estado.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

            if (HttpContext.Request.Headers["X-Requested-With"] == "XMLHttpRequest")
            {
                return Json(filteredPedidos);
            }

            return View("Index", filteredPedidos);
        }
    }
}

Directorio: Models
  Archivo: Cliente.cs
    Contenido:
using System.ComponentModel.DataAnnotations;

namespace MokkilicoresExpress.Models
{
    public class Cliente
    {
        [Required]
        public string Identificacion { get; set; }
        [Required]
        [StringLength(100)]
        public string Nombre { get; set; }
        [Required]
        [StringLength(100)]
        public string Apellido { get; set; }
        public string Provincia { get; set; }
        public string Canton { get; set; }
        public string Distrito { get; set; }
        public decimal DineroCompradoTotal { get; set; }
        public decimal DineroCompradoUltimoAnio { get; set; }
        public decimal DineroCompradoUltimosSeisMeses { get; set; }
    }
}

  Archivo: ErrorViewModel.cs
    Contenido:
namespace MokkilicoresExpress.Models;

public class ErrorViewModel
{
    public string? RequestId { get; set; }

    public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
}

  Archivo: Inventario.cs
    Contenido:
namespace MokkilicoresExpress.Models
{
    public class Inventario
    {
        public int Id { get; set; }
        public int CantidadEnExistencia { get; set; }
        public int BodegaId { get; set; }
        public DateTime FechaIngreso { get; set; }
        public DateTime FechaVencimiento { get; set; }
        public string TipoLicor { get; set; }
    }
}

  Archivo: LoginViewModel.cs
    Contenido:
namespace MokkilicoresExpress.Models
{
    public class LoginViewModel
    {
        public string ClientId { get; set; }
        public string Password { get; set; }
    }
}

  Archivo: Pedido.cs
    Contenido:
using System;

namespace MokkilicoresExpress.Models
{
    public class Pedido
    {
        public int Id { get; set; }
        public string ProductoId { get; set; }
        public int Cantidad { get; set; }
        public decimal CostoSinIVA { get; set; }
        public decimal CostoTotal { get { return CostoSinIVA * 1.13M; } } // IVA de 13%
        public string Estado { get; set; } // Ej: "En proceso", "Facturado", etc.
    }
}

Directorio: Views
  Subdirectorio: Account
Directorio: Views/Account
  Archivo: Login.cshtml
    Contenido:
@{
    ViewData["Title"] = "Iniciar Sesión";
}

<h2>Iniciar Sesión</h2>

<form asp-action="Login" method="post">
    <div class="form-group">
        <label for="clientId">Identificación</label>
        <input type="text" class="form-control" id="clientId" name="clientId" required>
    </div>
    <div class="form-group">
        <label for="password">Contraseña</label>
        <input type="password" class="form-control" id="password" name="password" required>
    </div>
    <button type="submit" class="btn btn-primary">Iniciar Sesión</button>
</form>

@if (ViewBag.ErrorMessage != null)
{
    <div class="alert alert-danger">@ViewBag.ErrorMessage</div>
}

  Archivo: Logout.cshtml
    Contenido:
@{
    ViewData["Title"] = "Cerrar Sesión";
}

<h2>Cerrar Sesión</h2>

<form asp-action="Logout" method="post">
    <button type="submit" class="btn btn-warning">Cerrar Sesión</button>
</form>
@if (ViewBag.ErrorMessage != null)
{
    <div class="alert alert-danger">@ViewBag.ErrorMessage</div>
}

  Subdirectorio: Cliente
Directorio: Views/Cliente
  Archivo: Create.cshtml
    Contenido:
@model MokkilicoresExpress.Models.Cliente

<h1>Agregar Nuevo Cliente</h1>

<form asp-action="Create" method="post">
    <div class="form-group">
        <label for="Identificacion">Identificación</label>
        <input type="text" class="form-control" id="Identificacion" name="Identificacion" required>
    </div>
    <div class="form-group">
        <label for="Nombre">Nombre</label>
        <input type="text" class="form-control" id="Nombre" name="Nombre" required>
    </div>
    <div class="form-group">
        <label for="Apellido">Apellidos</label>
        <input type="text" class="form-control" id="Apellido" name="Apellido" required>
    </div>
    <div class="form-group">
        <label for="Provincia">Provincia</label>
        <input type="text" class="form-control" id="Provincia" name="Provincia" required>
    </div>
    <div class="form-group">
        <label for="Canton">Cantón</label>
        <input type="text" class="form-control" id="Canton" name="Canton" required>
    </div>
    <div class="form-group">
        <label for="Distrito">Distrito</label>
        <input type="text" class="form-control" id="Distrito" name="Distrito" required>
    </div>
    <div class="form-group">
        <label for="DineroCompradoTotal">Dinero Comprado Total</label>
        <input type="text" class="form-control" id="DineroCompradoTotal" name="DineroCompradoTotal" required>
    </div>
    <div class="form-group">
        <label for="DineroCompradoUltimoAnio">Dinero Comprado Último Año</label>
        <input type="text" class="form-control" id="DineroCompradoUltimoAnio" name="DineroCompradoUltimoAnio" required>
    </div>
    <div class="form-group">
        <label for="DineroCompradoUltimosSeisMeses">Dinero Comprado Últimos 6 Meses</label>
        <input type="text" class="form-control" id="DineroCompradoUltimosSeisMeses" name="DineroCompradoUltimosSeisMeses" required>
    </div>
    <button type="submit" class="btn btn-primary">Crear</button>
</form>

  Archivo: Details.cshtml
    Contenido:
model <MokkilicoresExpress class="Models Cliente">
    @{
        ViewData["Title"] = "Detalles del Cliente";
    }

    <h1>Detalles del Cliente</h1>

<div class="form-group">
    <label>ID:</label>
    <input type="text" value="@Model.Identificacion" class="form-control" readonly />
</div>  
<div class="form-group">
    <label>Nombre:</label>
    <input type="text" value="@Model.Nombre" class="form-control" readonly />
</div>
<div class="form-group">
    <label>Apellido:</label>
    <input type="text" value="@Model.Apellido" class="form-control" readonly />
</div>
<div class="form-group">
    <label>Provincia:</label>
    <input type="text" value="@Model.Provincia" class="form-control" readonly />
</div>
<div class="form-group">
    <label>Cantón:</label>
    <input type="text" value="@Model.Canton" class="form-control" readonly />
</div>
<div class="form-group">
    <label>Distrito:</label>
    <input type="text" value="@Model.Distrito" class="form-control" readonly />
</div>
<div class="form-group">
    <label>Compras Historicas:</label>
    <input type="text" value="@Model.DineroCompradoTotal" class="form-control" readonly />
</div>
<div class="form-group">
    <label>Compras 12 Meses:</label>
    <input type="text" value="@Model.DineroCompradoUltimoAnio" class="form-control" readonly />
</div>
<div class="form-group">
    <label>Compras 6 Meses:</label>
    <input type="text" value="@Model.DineroCompradoUltimosSeisMeses" class="form-control" readonly />
</div>

<a href="@Url.Action("Index", "Cliente")" class="btn btn-primary">Volver a la lista</a>



</MokkilicoresExpress>
  Archivo: Edit.cshtml
    Contenido:
@model MokkilicoresExpress.Models.Cliente

<h1>Editar Cliente</h1>

<form asp-action="Edit" method="post">
    <input type="hidden" asp-for="Identificacion" />
    <div class="form-group">
        <label for="Nombre">Nombre</label>
        <input asp-for="Nombre" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="Apellido">Apellidos</label>
        <input asp-for="Apellido" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="Provincia">Provincia</label>
        <input asp-for="Provincia" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="Canton">Cantón</label>
        <input asp-for="Canton" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="Distrito">Distrito</label>
        <input asp-for="Distrito" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="DineroCompradoTotal">Dinero Comprado Total</label>
        <input asp-for="DineroCompradoTotal" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="DineroCompradoUltimoAnio">Dinero Comprado Último Año</label>
        <input asp-for="DineroCompradoUltimoAnio" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="DineroCompradoUltimosSeisMeses">Dinero Comprado Últimos 6 Meses</label>
        <input asp-for="DineroCompradoUltimosSeisMeses" class="form-control" required>
    </div>
    <button type="submit" class="btn btn-success">Actualizar</button>
</form>

  Archivo: Index.cshtml
    Contenido:
@model List<MokkilicoresExpress.Models.Cliente>
@{
    ViewData["Title"] = "Clientes";
}

<h1>Clientes</h1>
<input type="text" id="searchTermCliente" class="form-control mb-3" placeholder="Buscar por nombre, apellidos o identificación..." onkeyup="searchCliente()" />

<div class="mb-4">
    <a href="@Url.Action("Create", "Cliente")" class="btn btn-success">Crear Nuevo Cliente</a>
</div>

<table class="table table-striped" id="clienteTable">
    <thead>
        <tr>
            <th>Identificación</th>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Provincia</th>
            <th>Cantón</th>
            <th>Distrito</th>
            <th>Compras Históricas</th>
            <th>Compras 12 Meses</th>
            <th>Compras 6 Meses</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @if (Model.Any()) {
            foreach (var cliente in Model) {
                <tr>
                    <td>@cliente.Identificacion</td>
                    <td>@cliente.Nombre</td>
                    <td>@cliente.Apellido</td>
                    <td>@cliente.Provincia</td>
                    <td>@cliente.Canton</td>
                    <td>@cliente.Distrito</td>
                    <td>@cliente.DineroCompradoTotal</td>
                    <td>@cliente.DineroCompradoUltimoAnio</td>
                    <td>@cliente.DineroCompradoUltimosSeisMeses</td>
                    <td>
                        <a href="@Url.Action("Details", "Cliente", new { id = cliente.Identificacion })" class="btn btn-info">Detalles</a>
                        <a href="@Url.Action("Edit", "Cliente", new { id = cliente.Identificacion })" class="btn btn-primary">Editar</a>
                        <a href="@Url.Action("Delete", "Cliente", new { id = cliente.Identificacion })" class="btn btn-danger" onclick="return confirm('¿Estás seguro de querer eliminar este cliente?');">Eliminar</a>
                    </td>
                </tr>
            }
        } else {
            <tr><td colspan="10" class="text-center">No se encontraron resultados.</td></tr>
        }
    </tbody>
</table>

@section Scripts {
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script>
        function searchCliente() {
            var searchTerm = $('#searchTermCliente').val();
            $.get('@Url.Action("Search", "Cliente")', { searchTerm: searchTerm }, function(data) {
                var rows = "";
                if (!data.length) {
                    rows += '<tr><td colspan="10" class="text-center">No se encontraron resultados.</td></tr>';
                } else {
                    data.forEach(function(cliente) {
                        rows += `<tr>
                                    <td>${cliente.identificacion}</td>
                                    <td>${cliente.nombre}</td>
                                    <td>${cliente.apellido}</td>
                                    <td>${cliente.provincia}</td>
                                    <td>${cliente.canton}</td>
                                    <td>${cliente.distrito}</td>
                                    <td>${cliente.dineroCompradoTotal}</td>
                                    <td>${cliente.dineroCompradoUltimoAnio}</td>
                                    <td>${cliente.dineroCompradoUltimosSeisMeses}</td>
                                    <td>
                                        <a href="/Cliente/Details/${cliente.identificacion}" class="btn btn-info">Detalles</a>
                                        <a href="/Cliente/Edit/${cliente.identificacion}" class="btn btn-primary">Editar</a>
                                        <a href="/Cliente/Delete/${cliente.identificacion}" class="btn btn-danger" onclick="return confirm('¿Estás seguro de querer eliminar este cliente?');">Eliminar</a>
                                    </td>
                                </tr>`;
                    });
                }
                $('#clienteTable tbody').html(rows);
            });
        }
    </script>
}

  Subdirectorio: Home
Directorio: Views/Home
  Archivo: Index.cshtml
    Contenido:
﻿@{
    ViewData["Title"] = "Inicio";
}

<div class="container mt-5">
    <h1 class="display-4 text-center">Bienvenido a Mokkilicores Express</h1>
    <p class="lead text-center">Administra eficientemente tu negocio.</p>
    <p class="text-center">Puedes iniciar sesión para acceder a todas las funcionalidades usando Usuario: 88889999 Key: 88889999adA</p>
    <p class="text-center">O puedes navegar como invitado pero no podras agregar nuevos articulos o pedidos.</p>
    <p class="text-center">Esto es una version de prueba, accesos por roles y la autenticación no están implementados al 100%.</p>

    <!-- Área de autenticación -->
    <div class="text-right mb-4">
        @if (User.Identity.IsAuthenticated)
        {
            <p class="lead">Hola, @User.Identity.Name!</p>
            <form asp-controller="Account" asp-action="Logout" method="post">
                <button type="submit" class="btn btn-warning">Cerrar Sesión</button>
            </form>
        }
        else
        {
            <a href="/Account/Login" class="btn btn-success">Iniciar Sesión</a>
        }
    </div>

    <div class="row mt-4">
        <div class="col-md-4 mb-3 d-flex align-items-stretch">
            <div class="card w-100">
                <div class="card-body">
                    <h5 class="card-title">Gestionar Inventario</h5>
                    <p class="card-text">Administra todos los productos almacenados en tus bodegas.</p>
                    <a href="/Inventario" class="btn btn-primary">Inventario</a>
                </div>
            </div>
        </div>
        <div class="col-md-4 mb-3 d-flex align-items-stretch">
            <div class="card w-100">
                <div class="card-body">
                    <h5 class="card-title">Gestionar Clientes</h5>
                    <p class="card-text">Visualiza y edita la información de tus clientes.</p>
                    <a href="/Cliente" class="btn btn-primary">Clientes</a>
                </div>
            </div>
        </div>
        <div class="col-md-4 mb-3 d-flex align-items-stretch">
            <div class="card w-100">
                <div class="card-body">
                    <h5 class="card-title">Gestionar Pedidos</h5>
                    <p class="card-text">Controla todos los pedidos y gestiona su entrega.</p>
                    <a href="/Pedido" class="btn btn-primary">Pedidos</a>
                </div>
            </div>
        </div>
    </div>
</div>

  Archivo: Privacy.cshtml
    Contenido:
﻿@{
    ViewData["Title"] = "Privacy Policy";
}
<h1>@ViewData["Title"]</h1>

<p>Use this page to detail your site's privacy policy.</p>

  Subdirectorio: Inventario
Directorio: Views/Inventario
  Archivo: Create.cshtml
    Contenido:
@model MokkilicoresExpress.Models.Inventario

<h1>Crear Nuevo Artículo de Inventario</h1>

@if (!User.Identity.IsAuthenticated)
{
    <div class="alert alert-danger">
        Debe iniciar sesión para crear un Artículo.
    </div>
}
else
{
    <form asp-action="Create" method="post">
        <div class="form-group">
            <label for="Id">ID</label>
            <input type="text" class="form-control" id="Id" name="Id" required>
        </div>
        <div class="form-group">
            <label for="CantidadEnExistencia">Cantidad en Existencia</label>
            <input type="number" class="form-control" id="CantidadEnExistencia" name="CantidadEnExistencia" required>
        </div>
        <div class="form-group">
            <label for="BodegaId">ID Bodega</label>
            <input type="text" class="form-control" id="BodegaId" name="BodegaId" required>
        </div>
        <div class="form-group">
            <label for="FechaIngreso">Fecha de Ingreso</label>
            <input type="date" class="form-control" id="FechaIngreso" name="FechaIngreso" required>
        </div>
        <div class="form-group">
            <label for="FechaVencimiento">Fecha de Vencimiento</label>
            <input type="date" class="form-control" id="FechaVencimiento" name="FechaVencimiento" required>
        </div>
        <div class="form-group">
            <label for="TipoLicor">Tipo de Licor</label>
            <select class="form-control" id="TipoLicor" name="TipoLicor" required>
                <option value="Cerveza">Cerveza</option>
                <option value="Tequila">Tequila</option>
                <option value="Ron">Ron</option>
                <option value="Ginebra">Ginebra</option>
                <option value="Whiskey">Whiskey</option>
                <option value="Digestivo">Digestivo</option>
                <option value="Agua Ardiente">Agua Ardiente</option>
                <option value="Vino Tinto">Vino Tinto</option>
                <option value="Vino Blanco">Vino Blanco</option>
                <option value="Vino Rosado">Vino Rosado</option>
                <option value="Champagne">Champagne</option>
            </select>
        </div>
        <button type="submit" class="btn btn-primary">Crear</button>
    </form>
}

  Archivo: Details.cshtml
    Contenido:
@model MokkilicoresExpress.Models.Inventario

@{
    ViewData["Title"] = "Detalles del Inventario";
}

<h1>Detalles del Artículo</h1>

<div class="form-group">
    <label>ID:</label>
    <input type="text" value="@Model.Id" class="form-control" readonly />
</div>
<div class="form-group">
    <label>Cantidad en Existencia:</label>
    <input type="text" value="@Model.CantidadEnExistencia" class="form-control" readonly />
</div>
<div class="form-group">
    <label>ID Bodega:</label>
    <input type="text" value="@Model.BodegaId" class="form-control" readonly />
</div>
<div class="form-group">
    <label>Fecha de Ingreso:</label>
    <input type="text" value="@Model.FechaIngreso.ToShortDateString()" class="form-control" readonly />
</div>
<div class="form-group">
    <label>Fecha de Vencimiento:</label>
    <input type="text" value="@Model.FechaVencimiento.ToShortDateString()" class="form-control" readonly />
</div>
<div class="form-group">
    <label>Tipo de Licor:</label>
    <input type="text" value="@Model.TipoLicor" class="form-control" readonly />
</div>

<a href="@Url.Action("Index", "Inventario")" class="btn btn-primary">Volver a la lista</a>

  Archivo: Edit.cshtml
    Contenido:
@model MokkilicoresExpress.Models.Inventario

<h1>Editar Artículo de Inventario</h1>
@if (!User.Identity.IsAuthenticated)
{
    <div class="alert alert-danger">
        Debe iniciar sesión para crear un Artículo.
    </div>
}
else
{
        
    <form asp-action="Edit" method="post">
        <input type="hidden" asp-for="Id" />
        <div class="form-group">
            <label for="CantidadEnExistencia">Cantidad en Existencia</label>
            <input asp-for="CantidadEnExistencia" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="BodegaId">ID Bodega</label>
            <input asp-for="BodegaId" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="FechaIngreso">Fecha de Ingreso</label>
            <input asp-for="FechaIngreso" class="form-control" type="date" required>
        </div>
        <div class="form-group">
            <label for="FechaVencimiento">Fecha de Vencimiento</label>
            <input asp-for="FechaVencimiento" class="form-control" type="date" required>
        </div>
        <div class="form-group">
            <label for="TipoLicor">Tipo de Licor</label>
            <select asp-for="TipoLicor" class="form-control" required>
                <option value="Cerveza">Cerveza</option>
                <option value="Tequila">Tequila</option>
                <option value="Ron">Ron</option>
                <option value="Ginebra">Ginebra</option>
                <option value="Whiskey">Whiskey</option>
                <option value="Digestivo">Digestivo</option>
                <option value="Agua Ardiente">Agua Ardiente</option>
                <option value="Vino Tinto">Vino Tinto</option>
                <option value="Vino Blanco">Vino Blanco</option>
                <option value="Vino Rosado">Vino Rosado</option>
                <option value="Champagne">Champagne</option>
            </select>
        </div>
        <button type="submit" class="btn btn-success">Actualizar</button>
    </form>
}
  Archivo: Index.cshtml
    Contenido:
@model List<MokkilicoresExpress.Models.Inventario>
@{
    ViewData["Title"] = "Inventario";
}

<h1>Inventario</h1>

<!-- Formulario de búsqueda dinámica -->
<input type="text" id="searchTerm" class="form-control mb-3" placeholder="Buscar por tipo de licor..." onkeyup="searchInventory()" />

<!-- Botón para crear un nuevo artículo -->
<div class="mb-4">
    <a href="@Url.Action("Create", "Inventario")" class="btn btn-success">Crear Nuevo Artículo</a>
</div>

<!-- Tabla de inventario -->
<table class="table table-striped" id="inventoryTable">
    <thead>
        <tr>
            <th>ID</th>
            <th>Cantidad en Existencia</th>
            <th>ID Bodega</th>
            <th>Fecha Ingreso</th>
            <th>Fecha Vencimiento</th>
            <th>Tipo de Licor</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @if (Model.Any()) {
            foreach (var item in Model) {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.CantidadEnExistencia</td>
                    <td>@item.BodegaId</td>
                    <td>@item.FechaIngreso.ToShortDateString()</td>
                    <td>@item.FechaVencimiento.ToShortDateString()</td>
                    <td>@item.TipoLicor</td>
                    <td>
                        <a href="@Url.Action("Details", "Inventario", new { id = item.Id })" class="btn btn-info">Detalles</a>
                        <a href="@Url.Action("Edit", "Inventario", new { id = item.Id })" class="btn btn-primary">Editar</a>
                        <a href="@Url.Action("Delete", "Inventario", new { id = item.Id })" class="btn btn-danger" onclick="return confirm('¿Estás seguro de querer eliminar este artículo?');">Eliminar</a>
                    </td>
                </tr>
            }
        } else {
            <tr>
                <td colspan="7" class="text-center">No se encontraron resultados.</td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script>
        function searchInventory() {
            var searchTerm = $('#searchTerm').val();
            $.get('@Url.Action("Search", "Inventario")', { searchTerm: searchTerm }, function(data) {
                var rows = "";
                if (!data.length) {
                    rows += '<tr><td colspan="7" class="text-center">No se encontraron resultados.</td></tr>';
                } else {
                    data.forEach(function(item) {
                        rows += `<tr>
                                    <td>${item.id}</td>
                                    <td>${item.cantidadEnExistencia}</td>
                                    <td>${item.bodegaId}</td>
                                    <td>${new Date(item.fechaIngreso).toLocaleDateString()}</td>
                                    <td>${new Date(item.fechaVencimiento).toLocaleDateString()}</td>
                                    <td>${item.tipoLicor}</td>
                                    <td>
                                        <a href="/Inventario/Details/${item.id}" class="btn btn-info">Detalles</a>
                                        <a href="/Inventario/Edit/${item.id}" class="btn btn-primary">Editar</a>
                                        <a href="/Inventario/Delete/${item.id}" class="btn btn-danger" onclick="return confirm('¿Estás seguro de querer eliminar este artículo?');">Eliminar</a>
                                    </td>
                                </tr>`;
                    });
                }
                $('#inventoryTable tbody').html(rows);
            });
        }
    </script>
}

  Subdirectorio: Pedido
Directorio: Views/Pedido
  Archivo: Create.cshtml
    Contenido:
@model MokkilicoresExpress.Models.Pedido

<h1>Crear Nuevo Pedido</h1>

@if (!User.Identity.IsAuthenticated)
{
    <div class="alert alert-danger">
        Debe iniciar sesión para crear un pedido.
    </div>
}
else
{

<form asp-action="Create" method="post">
    <div class="form-group">
        <label for="ProductoId">Producto ID</label>
        <input type="text" class="form-control" id="ProductoId" name="ProductoId" required>
    </div>
    <div class="form-group">
        <label for="Cantidad">Cantidad</label>
        <input type="number" class="form-control" id="Cantidad" name="Cantidad" required>
    </div>
    <div class="form-group">
        <label for="CostoSinIVA">Costo Sin IVA</label>
        <input type="number" step="0.01" class="form-control" id="CostoSinIVA" name="CostoSinIVA" required>
    </div>
    <div class="form-group">
        <label for="Estado">Estado del Pedido</label>
        <select class="form-control" id="Estado" name="Estado" required>
            <option value="En proceso">En proceso</option>
            <option value="Facturado">Facturado</option>
            <option value="Por entregar">Por entregar</option>
            <option value="Entregado">Entregado</option>
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Crear</button>
</form>
}
  Archivo: Details.cshtml
    Contenido:
@model MokkilicoresExpress.Models.Pedido

@{
    ViewData["Title"] = "Detalles del Pedido";
}

<h1>Detalles del Pedido</h1>

<div class="form-group">
    <label>ID Producto:</label>
    <input type="text" value="@Model.ProductoId" class="form-control" readonly />
</div>
<div class="form-group">
    <label>Cantidad:</label>
    <input type="text" value="@Model.Cantidad" class="form-control" readonly />
</div>
<div class="form-group">
    <label>Costo Sin IVA:</label>
    <input type="text" value="@Model.CostoSinIVA.ToString("C")" class="form-control" readonly />
</div>
<div class="form-group">
    <label>Costo Total:</label>
    <input type="text" value="@Model.CostoTotal.ToString("C")" class="form-control" readonly />
</div>
<div class="form-group">
    <label>Estado:</label>
    <input type="text" value="@Model.Estado" class="form-control" readonly />
</div>

<a href="@Url.Action("Index", "Pedido")" class="btn btn-primary">Volver a la lista</a>
  Archivo: Edit.cshtml
    Contenido:
@model MokkilicoresExpress.Models.Pedido

<h1>Editar Pedido</h1>

@if (!User.Identity.IsAuthenticated)
{
    <div class="alert alert-danger">
        Debe iniciar sesión para editar un pedido.
    </div>
}
else
{
    <form asp-action="Edit" method="post">
        <input type="hidden" asp-for="Id" />
        <div class="form-group">
            <label for="ProductoId">Producto ID</label>
            <input asp-for="ProductoId" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="Cantidad">Cantidad</label>
            <input asp-for="Cantidad" type="number" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="CostoSinIVA">Costo Sin IVA</label>
            <input asp-for="CostoSinIVA" type="number" step="0.01" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="Estado">Estado del Pedido</label>
            <select asp-for="Estado" class="form-control" required>
                <option value="En proceso">En proceso</option>
                <option value="Facturado">Facturado</option>
                <option value="Por entregar">Por entregar</option>
                <option value="Entregado">Entregado</option>
            </select>
        </div>
        <button type="submit" class="btn btn-success">Actualizar</button>
    </form>
}
  Archivo: Index.cshtml
    Contenido:
@model List<MokkilicoresExpress.Models.Pedido>
@{
    ViewData["Title"] = "Pedidos";
}

<h1>Pedidos</h1>

<!-- Formulario de búsqueda dinámica -->
<input type="text" id="searchTermPedido" class="form-control mb-3" placeholder="Buscar por ID de pedido..." onkeyup="searchPedido()" />

<!-- Botón para crear un nuevo pedido -->
<div class="mb-4">
    <a href="@Url.Action("Create", "Pedido")" class="btn btn-success">Crear Nuevo Pedido</a>
</div>

<!-- Tabla de pedidos -->
<table class="table table-striped" id="pedidoTable">
    <thead>
        <tr>
            <th>ID</th>
            <th>Producto ID</th>
            <th>Cantidad</th>
            <th>Costo Sin IVA</th>
            <th>Costo Total</th>
            <th>Estado</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @if (Model.Any()) {
            foreach (var pedido in Model) {
                <tr>
                    <td>@pedido.Id</td>
                    <td>@pedido.ProductoId</td>
                    <td>@pedido.Cantidad</td>
                    <td>@pedido.CostoSinIVA.ToString("C")</td>
                    <td>@pedido.CostoTotal.ToString("C")</td>
                    <td>@pedido.Estado</td>
                    <td>
                        <a href="@Url.Action("Details", "Pedido", new { id = pedido.Id })" class="btn btn-info">Detalles</a>
                        <a href="@Url.Action("Edit", "Pedido", new { id = pedido.Id })" class="btn btn-primary">Editar</a>
                        <a href="@Url.Action("Delete", "Pedido", new { id = pedido.Id })" class="btn btn-danger" onclick="return confirm('¿Estás seguro de querer eliminar este pedido?');">Eliminar</a>
                    </td>
                </tr>
            }
        } else {
            <tr><td colspan="7" class="text-center">No se encontraron resultados.</td></tr>
        }
    </tbody>
</table>

@section Scripts {
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script>
        function searchPedido() {
            var searchTerm = $('#searchTermPedido').val();
            $.get('@Url.Action("Search", "Pedido")', { searchTerm: searchTerm }, function(data) {
                var rows = "";
                if (!data.length) {
                    rows += '<tr><td colspan="7" class="text-center">No se encontraron resultados.</td></tr>';
                } else {
                    data.forEach(function(pedido) {
                        rows += `<tr>
                                    <td>${pedido.id}</td>
                                    <td>${pedido.productoId}</td>
                                    <td>${pedido.cantidad}</td>
                                    <td>${pedido.costoSinIVA.toFixed(2)}</td>
                                    <td>${pedido.costoTotal.toFixed(2)}</td>
                                    <td>${pedido.estado}</td>
                                    <td>
                                        <a href="/Pedido/Details/${pedido.id}" class="btn btn-info">Detalles</a>
                                        <a href="/Pedido/Edit/${pedido.id}" class="btn btn-primary">Editar</a>
                                        <a href="/Pedido/Delete/${pedido.id}" class="btn btn-danger" onclick="return confirm('¿Estás seguro de querer eliminar este pedido?');">Eliminar</a>
                                    </td>
                                </tr>`;
                    });
                }
                $('#pedidoTable tbody').html(rows);
            });
        }
    </script>
}

  Subdirectorio: Shared
Directorio: Views/Shared
  Archivo: Error.cshtml
    Contenido:
﻿@model ErrorViewModel
@{
    ViewData["Title"] = "Error";
}

<h1 class="text-danger">Error.</h1>
<h2 class="text-danger">An error occurred while processing your request.</h2>

@if (Model.ShowRequestId)
{
    <p>
        <strong>Request ID:</strong> <code>@Model.RequestId</code>
    </p>
}

<h3>Development Mode</h3>
<p>
    Swapping to <strong>Development</strong> environment will display more detailed information about the error that occurred.
</p>
<p>
    <strong>The Development environment shouldn't be enabled for deployed applications.</strong>
    It can result in displaying sensitive information from exceptions to end users.
    For local debugging, enable the <strong>Development</strong> environment by setting the <strong>ASPNETCORE_ENVIRONMENT</strong> environment variable to <strong>Development</strong>
    and restarting the app.
</p>

  Archivo: _Layout.cshtml
    Contenido:
﻿<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - MokkilicoresExpress</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">MokkilicoresExpress</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Inicio</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Inventario" asp-action="Index">Inventario</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Cliente" asp-action="Index">Clientes</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Pedido" asp-action="Index">Pedidos</a>
                        </li>
                        @if (User.Identity.IsAuthenticated)
                        {
                            <li class="nav-item">
                                <form asp-controller="Account" asp-action="Logout" method="post">
                <button type="submit" class="btn btn-warning">Cerrar Sesión (@User.Identity.Name)</button>
            </form>
                               
                            </li>
                        }
                        else
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-area="" asp-controller="Account" asp-action="Login">Iniciar Sesión</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2024 - MokkilicoresExpress - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacidad</a>
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

  Archivo: _Layout.cshtml.css
    Contenido:
﻿/* Please see documentation at https://learn.microsoft.com/aspnet/core/client-side/bundling-and-minification
for details on configuring this project to bundle and minify static web assets. */

a.navbar-brand {
  white-space: normal;
  text-align: center;
  word-break: break-all;
}

a {
  color: #0077cc;
}

.btn-primary {
  color: #fff;
  background-color: #1b6ec2;
  border-color: #1861ac;
}

.nav-pills .nav-link.active, .nav-pills .show > .nav-link {
  color: #fff;
  background-color: #1b6ec2;
  border-color: #1861ac;
}

.border-top {
  border-top: 1px solid #e5e5e5;
}
.border-bottom {
  border-bottom: 1px solid #e5e5e5;
}

.box-shadow {
  box-shadow: 0 .25rem .75rem rgba(0, 0, 0, .05);
}

button.accept-policy {
  font-size: 1rem;
  line-height: inherit;
}

.footer {
  position: absolute;
  bottom: 0;
  width: 100%;
  white-space: nowrap;
  line-height: 60px;
}

  Archivo: _ValidationScriptsPartial.cshtml
    Contenido:
﻿<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

  Archivo: _ViewImports.cshtml
    Contenido:
﻿@using MokkilicoresExpress
@using MokkilicoresExpress.Models
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

  Archivo: _ViewStart.cshtml
    Contenido:
﻿@{
    Layout = "_Layout";
}

Archivo: Program.cs
  Contenido:
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.Extensions.Caching.Memory;
using MokkilicoresExpress.Models;  
using System.Collections.Generic;


var builder = WebApplication.CreateBuilder(args);

// Agregar servicios al contenedor de servicios
builder.Services.AddControllersWithViews();
// Agregar servicio de memoria caché
builder.Services.AddMemoryCache();
// Configurar autenticación con cookies
builder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
    .AddCookie(options =>
    {
        options.LoginPath = "/Account/Login";
        options.LogoutPath = "/Account/Logout";
    });

// Agregar el servicio de acceso al contexto HTTP
builder.Services.AddHttpContextAccessor();


var app = builder.Build();

// Configuración de la aplicación
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}


app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();
app.UseAuthorization();
app.UseAuthentication();



app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");



// Inicializar la caché con datos de prueba
InitializeCache(app.Services);


app.Run();


// Inicializar la caché con datos de prueba
// Este método se ejecuta al inicio de la aplicación para cargar datos de prueba en la caché    
void InitializeCache(IServiceProvider services)
{
    var cache = services.GetRequiredService<IMemoryCache>();
    const string ClienteCacheKey = "Clientes";

    if (!cache.TryGetValue(ClienteCacheKey, out List<Cliente> _))
    {
        List<Cliente> initialClientes = new List<Cliente>
        {
            new Cliente { Identificacion = "123456789", Nombre = "Mario", Apellido = "Lopez", Provincia = "Cartago", Canton = "La Union", Distrito = "Tres Rios", DineroCompradoTotal = 0, DineroCompradoUltimoAnio = 0, DineroCompradoUltimosSeisMeses = 0 },
            new Cliente { Identificacion = "88889999", Nombre = "Admin", Apellido = "Admin", Provincia = "Heredia", Canton = "Belén", Distrito = "La Asunción", DineroCompradoTotal = 0, DineroCompradoUltimoAnio = 0, DineroCompradoUltimosSeisMeses = 0 }
        };
        cache.Set(ClienteCacheKey, initialClientes, new MemoryCacheEntryOptions().SetSlidingExpiration(TimeSpan.FromMinutes(60)));
    }
}

