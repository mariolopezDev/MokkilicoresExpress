File names/paths and their content
Filename: ./ViewModels/PedidoViewModel.cs
-----------------------------------
namespace MokkilicoresExpress.Models
{
    public class PedidoViewModel
    {
        public int Id { get; set; }
        public int ProductoId { get; set; }
        public string NombreProducto { get; set; }  // Nombre descriptivo del producto
        public string TipoLicor { get; set; }  // Tipo de licor
        public decimal PrecioUnitario { get; set; }  // Precio por unidad
        public int Cantidad { get; set; }
        public decimal CostoSinIVA { get; set; }
        public decimal CostoTotal { get { return CostoSinIVA * 1.13M; } }
        public string Estado { get; set; }
        public int ClienteId { get; set; }
        public string NombreCliente { get; set; }  // Nombre del cliente asociado al pedido
        public DateTime FechaPedido { get; set; }
    }
}



Filename: ./appsettings.json
-----------------------------------
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information",
      "MokkilicoresExpress.Controllers": "Debug"
    },
    "Console": {
      "IncludeScopes": true,
      "LogLevel": {
        "Default": "Information",
        "Microsoft.AspNetCore": "Warning",
        "Microsoft": "Warning",
        "Microsoft.Hosting.Lifetime": "Information",
        "MokkilicoresExpress.Controllers": "Debug"
      }
    }
  },
  "AllowedHosts": "*"
}



Filename: ./Models/ViewModels/CreatePedidoViewModel.cs
-----------------------------------
namespace MokkilicoresExpress.Models.ViewModels
{
    public class CreatePedidoViewModel
    {
        public Pedido Pedido { get; set; } = new Pedido();
        public List<Cliente> Clientes { get; set; } = new List<Cliente>();
        public List<Inventario> Inventarios { get; set; } = new List<Inventario>();
    }
}



Filename: ./Models/ViewModels/PedidoDetailsViewModel.cs
-----------------------------------
namespace MokkilicoresExpress.Models.ViewModels
{
    public class PedidoDetailsViewModel
    {
        public Pedido Pedido { get; set; }
        public Cliente Cliente { get; set; }
        public Inventario Inventario { get; set; }
    }
}



Filename: ./Models/ErrorViewModel.cs
-----------------------------------
namespace MokkilicoresExpress.Models;

public class ErrorViewModel
{
    public string? RequestId { get; set; }

    public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
}



Filename: ./Models/Direccion.cs
-----------------------------------
using System.ComponentModel.DataAnnotations;

namespace MokkilicoresExpress.Models
{
    public class Direccion
    {
        public int Id { get; set; }

        [Required]
        public int ClienteId { get; set; }

        [Required]
        public string Provincia { get; set; }

        [Required]
        public string Canton { get; set; }

        [Required]
        public string Distrito { get; set; }

        [Required]
        [Url]
        public string PuntoEnWaze { get; set; }

        [Required]
        public bool EsCondominio { get; set; }

        [Required]
        public bool EsPrincipal { get; set; }
    }
}



Filename: ./Models/LoginViewModel.cs
-----------------------------------
namespace MokkilicoresExpress.Models
{
    public class LoginViewModel
    {
        public string ClientId { get; set; }
        public string Password { get; set; }
    }
}



Filename: ./Models/Cliente.cs
-----------------------------------
using System.ComponentModel.DataAnnotations;

namespace MokkilicoresExpress.Models
{
    public class Cliente
    {
        public int Id { get; set; }
        [Required]
        public string Identificacion { get; set; }
        [Required]
        [StringLength(100)]
        public string Nombre { get; set; }
        [Required]
        [StringLength(100)]
        public string Apellido { get; set; }
        public string Provincia { get; set; }
        public string Canton { get; set; }
        public string Distrito { get; set; }
        public decimal DineroCompradoTotal { get; set; }
        public decimal DineroCompradoUltimoAnio { get; set; }
        public decimal DineroCompradoUltimosSeisMeses { get; set; }

        public string NombreCompleto => $"{Nombre} {Apellido}";
        public List<Direccion> Direcciones { get; set; } = new List<Direccion>();

    }
}



Filename: ./Models/Pedido.cs
-----------------------------------
using System.ComponentModel.DataAnnotations;

namespace MokkilicoresExpress.Models
{
    public class Pedido
    {
        public int Id { get; set; }
        
        [Required]
        public int ClienteId { get; set; }
        
        [Required]
        public int InventarioId { get; set; }

        [Required]
        public int DireccionId { get; set; }
        
        [Required]
        public int Cantidad { get; set; }
        
        [Required]
        public decimal CostoSinIVA { get; set; }
        
        public decimal CostoTotal 
        { 
            get { return CostoSinIVA * 1.13M; } // IVA de 13% 
        }
        
        [Required]
        [StringLength(50)]
        public string Estado { get; set; } // Ej: "En proceso", "Facturado", etc.
    }
}



Filename: ./Models/Inventario.cs
-----------------------------------
namespace MokkilicoresExpress.Models
{
    public class Inventario
    {
        public int Id { get; set; }
        public int CantidadEnExistencia { get; set; }
        public int BodegaId { get; set; }
        public DateTime FechaIngreso { get; set; }
        public DateTime FechaVencimiento { get; set; }
        public string TipoLicor { get; set; }
    }
}



Filename: ./Properties/launchSettings.json
-----------------------------------
﻿{
  "$schema": "http://json.schemastore.org/launchsettings.json",
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:41726",
      "sslPort": 44380
    }
  },
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "applicationUrl": "http://localhost:5035",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "https": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "applicationUrl": "https://localhost:7210;http://localhost:5035",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}



Filename: ./Controllers/DireccionController.cs
-----------------------------------
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;
using MokkilicoresExpress.Models;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;

namespace MokkilicoresExpress.Controllers
{
    public class DireccionController : Controller
    {
        private readonly HttpClient _httpClient;
        private readonly IMemoryCache _cache;
        private const string ClienteCacheKey = "Clientes";

        public DireccionController(IHttpClientFactory httpClientFactory, IMemoryCache cache)
        {
            _httpClient = httpClientFactory.CreateClient("ApiClient");
            _cache = cache;
        }

        public async Task<IActionResult> Index()
        {
            var direcciones = await _httpClient.GetFromJsonAsync<List<Direccion>>("/api/Direccion");
            return View(direcciones);
        }

        public IActionResult Create()
        {
            var clienteId = User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(clienteId))
            {
                return Unauthorized();
            }

            var direccion = new Direccion { ClienteId = int.Parse(clienteId) };
            return View(direccion);
        }

        [HttpPost]
        public async Task<IActionResult> Create(Direccion direccion)
        {
            if (ModelState.IsValid)
            {
                var response = await _httpClient.PostAsJsonAsync("/api/Direccion", direccion);
                if (response.IsSuccessStatusCode)
                {
                    return RedirectToAction(nameof(Index));
                }
                ModelState.AddModelError("", "Error al crear la dirección");
            }

            return View(direccion);
        }

        public async Task<IActionResult> Edit(int id)
        {
            var direccion = await _httpClient.GetFromJsonAsync<Direccion>($"/api/Direccion/{id}");
            if (direccion == null)
            {
                return NotFound();
            }

            var clienteId = User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(clienteId) || direccion.ClienteId != int.Parse(clienteId))
            {
                return Unauthorized();
            }

            return View(direccion);
        }

        [HttpPost]
        public async Task<IActionResult> Edit(Direccion direccion)
        {
            if (ModelState.IsValid)
            {
                var response = await _httpClient.PutAsJsonAsync($"/api/Direccion/{direccion.Id}", direccion);
                if (response.IsSuccessStatusCode)
                {
                    return RedirectToAction(nameof(Index));
                }
                ModelState.AddModelError("", "Error al editar la dirección");
            }

            return View(direccion);
        }

        public async Task<IActionResult> Details(int id)
        {
            var direccion = await _httpClient.GetFromJsonAsync<Direccion>($"/api/Direccion/{id}");
            if (direccion == null)
            {
                return NotFound();
            }

            var clienteId = User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(clienteId) || direccion.ClienteId != int.Parse(clienteId))
            {
                return Unauthorized();
            }

            return View(direccion);
        }

        public async Task<IActionResult> Delete(int id)
        {
            var direccion = await _httpClient.GetFromJsonAsync<Direccion>($"/api/Direccion/{id}");
            if (direccion == null)
            {
                return NotFound();
            }

            var clienteId = User.FindFirstValue(ClaimTypes.NameIdentifier);
            if (string.IsNullOrEmpty(clienteId) || direccion.ClienteId != int.Parse(clienteId))
            {
                return Unauthorized();
            }

            var response = await _httpClient.DeleteAsync($"/api/Direccion/{id}");
            if (response.IsSuccessStatusCode)
            {
                return RedirectToAction(nameof(Index));
            }

            ModelState.AddModelError("", "Error al eliminar la dirección");
            return RedirectToAction(nameof(Index));
        }
    }
}



Filename: ./Controllers/InventarioController.cs
-----------------------------------
using Microsoft.AspNetCore.Mvc;
using MokkilicoresExpress.Models;
using System.Net.Http;
using System.Net.Http.Json;
using System.Threading.Tasks;

namespace MokkilicoresExpress.Controllers
{
    public class InventarioController : Controller
    {
        private readonly HttpClient _httpClient;

        public InventarioController(IHttpClientFactory httpClientFactory)
        {
            _httpClient = httpClientFactory.CreateClient("ApiClient");
        }

        public async Task<IActionResult> Index()
        {
            var inventarios = await _httpClient.GetFromJsonAsync<List<Inventario>>("/api/Inventario");
            return View(inventarios);
        }

        public IActionResult Create()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Create(Inventario inventario)
        {
            var response = await _httpClient.PostAsJsonAsync("/api/Inventario", inventario);
            if (response.IsSuccessStatusCode)
            {
                return RedirectToAction(nameof(Index));
            }
            ModelState.AddModelError("", "Error al crear inventario");
            return View(inventario);
        }

        public async Task<IActionResult> Details(int id)
        {
            var inventario = await _httpClient.GetFromJsonAsync<Inventario>($"/api/Inventario/{id}");
            if (inventario == null)
            {
                return NotFound();
            }
            return View(inventario);
        }

        public async Task<IActionResult> Edit(int id)
        {
            var inventario = await _httpClient.GetFromJsonAsync<Inventario>($"/api/Inventario/{id}");
            if (inventario == null)
            {
                return NotFound();
            }
            return View(inventario);
        }

        [HttpPost]
        public async Task<IActionResult> Edit(Inventario inventario)
        {
            var response = await _httpClient.PutAsJsonAsync($"/api/Inventario/{inventario.Id}", inventario);
            if (response.IsSuccessStatusCode)
            {
                return RedirectToAction(nameof(Index));
            }
            ModelState.AddModelError("", "Error al editar inventario");
            return View(inventario);
        }

        public async Task<IActionResult> Delete(int id)
        {
            var response = await _httpClient.DeleteAsync($"/api/Inventario/{id}");
            if (response.IsSuccessStatusCode)
            {
                return RedirectToAction(nameof(Index));
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                ModelState.AddModelError("", "No tienes permiso para eliminar este inventario.");
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                ModelState.AddModelError("", "Inventario no encontrado.");
            }
            else
            {
                ModelState.AddModelError("", "Error al eliminar inventario.");
            }

            return RedirectToAction(nameof(Index));
        }


        public async Task<IActionResult> Search(string searchTerm)
        {
            var inventarios = await _httpClient.GetFromJsonAsync<List<Inventario>>("/api/Inventario");

            var filteredInventarios = string.IsNullOrWhiteSpace(searchTerm) ? 
                inventarios : 
                inventarios.Where(i => i.TipoLicor.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

            if (HttpContext.Request.Headers["X-Requested-With"] == "XMLHttpRequest")
            {
                return Json(filteredInventarios);
            }

            return View("Index", filteredInventarios);
        }
    }
}



Filename: ./Controllers/AccountController.cs
-----------------------------------
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Mvc;
using System.Net.Http;
using System.Net.Http.Json;
using System.Security.Claims;
using System.Threading.Tasks;
using System.Collections.Generic;

namespace MokkilicoresExpress.Controllers
{
    public class AccountController : Controller
    {
        private readonly HttpClient _httpClient;

        public AccountController(IHttpClientFactory httpClientFactory)
        {
            _httpClient = httpClientFactory.CreateClient("ApiClient");
        }

        [HttpGet]
        public IActionResult Login()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Login(string identificacion, string password)
        {
            var loginRequest = new { Identificacion = identificacion, Password = password };
            var response = await _httpClient.PostAsJsonAsync("/api/Account/login", loginRequest);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();

                if (result == null || string.IsNullOrEmpty(result.Token))
                {
                    ViewBag.ErrorMessage = "Error en la respuesta del servidor.";
                    return View();
                }

                var claims = new List<Claim>
                {
                    new Claim(ClaimTypes.NameIdentifier, result.Identificacion ?? string.Empty),
                    new Claim(ClaimTypes.Role, result.Role ?? string.Empty),
                    new Claim(ClaimTypes.Name, result.Identificacion ?? string.Empty)
                };

                var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                var authProperties = new AuthenticationProperties();

                await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, new ClaimsPrincipal(claimsIdentity), authProperties);

                HttpContext.Response.Cookies.Append("jwt", result.Token, new CookieOptions
                {
                    HttpOnly = true,
                    Secure = true,
                    SameSite = SameSiteMode.Lax,
                    Expires = DateTime.UtcNow.AddHours(1)
                });

                return RedirectToAction("Index", "Home");
            }

            ViewBag.ErrorMessage = "Credenciales inválidas";
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Logout()
        {
            HttpContext.Response.Cookies.Delete("jwt");
            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
            return RedirectToAction("Index", "Home");
        }

        public class LoginResponse
        {
            public string Token { get; set; }
            public string Identificacion { get; set; }
            public string Role { get; set; }
        }
    }
}



Filename: ./Controllers/ClienteController.cs
-----------------------------------
using Microsoft.AspNetCore.Mvc;
using MokkilicoresExpress.Models;
using System.Net.Http;
using System.Net.Http.Json;
using System.Threading.Tasks;

namespace MokkilicoresExpress.Controllers
{
    public class ClienteController : Controller
    {
        private readonly HttpClient _httpClient;

        public ClienteController(IHttpClientFactory httpClientFactory)
        {
            _httpClient = httpClientFactory.CreateClient("ApiClient");
        }

        public async Task<IActionResult> Index()
        {
            var clientes = await _httpClient.GetFromJsonAsync<List<Cliente>>("/api/Cliente");
            return View(clientes);
        }

        public IActionResult Create()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Create(Cliente cliente)
        {
            var response = await _httpClient.PostAsJsonAsync("/api/Cliente", cliente);
            if (response.IsSuccessStatusCode)
            {
                return RedirectToAction(nameof(Index));
            }
            ModelState.AddModelError("", "Error al crear cliente");
            return View(cliente);
        }


        public async Task<IActionResult> Details(int id)
        {
            var cliente = await _httpClient.GetFromJsonAsync<Cliente>($"/api/Cliente/{id}");
            if (cliente == null)
            {
                return NotFound();
            }
            return View(cliente);
        }

        public async Task<IActionResult> Edit(int id)
        {
            var cliente = await _httpClient.GetFromJsonAsync<Cliente>($"/api/Cliente/{id}");
            if (cliente == null)
            {
                return NotFound();
            }
            return View(cliente);
        }

        [HttpPost]
        public async Task<IActionResult> Edit(Cliente cliente)
        {
            var response = await _httpClient.PutAsJsonAsync($"/api/Cliente/{cliente.Id}", cliente);
            if (response.IsSuccessStatusCode)
            {
                return RedirectToAction(nameof(Index));
            }
            ModelState.AddModelError("", "Error al editar cliente");
            return View(cliente);
        }

        public async Task<IActionResult> Delete(int id)
        {
            var response = await _httpClient.DeleteAsync($"/api/Cliente/{id}");
            if (response.IsSuccessStatusCode)
            {
                return RedirectToAction(nameof(Index));
            }
            ModelState.AddModelError("", "Error al eliminar cliente");
            return RedirectToAction(nameof(Index));
        }

        public async Task<IActionResult> Search(string searchTerm)
        {
            var clientes = await _httpClient.GetFromJsonAsync<List<Cliente>>("/api/Cliente");

            // Realizar la búsqueda si searchTerm no está vacío
            var filteredClientes = string.IsNullOrWhiteSpace(searchTerm) ? 
                clientes : 
                clientes.Where(c => c.Nombre.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                    c.Apellido.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                    c.Identificacion.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

            // Verificar si la solicitud es un AJAX request para devolver JSON
            if (HttpContext.Request.Headers["X-Requested-With"] == "XMLHttpRequest")
            {
                return Json(filteredClientes);
            }

            // Devolver la vista 'Index' con los clientes filtrados
            return View("Index", filteredClientes);
        }

        
    }
}



Filename: ./Controllers/HomeController.cs
-----------------------------------
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using MokkilicoresExpress.Models;

namespace MokkilicoresExpress.Controllers;

public class HomeController : Controller
{
    private readonly ILogger<HomeController> _logger;

    public HomeController(ILogger<HomeController> logger)
    {
        _logger = logger;
    }

    public IActionResult Index()
    {
        return View();
    }

    public IActionResult Privacy()
    {
        return View();
    }

    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
    public IActionResult Error()
    {
        return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
    }
}


Filename: ./Controllers/PedidoController.cs
-----------------------------------
using Microsoft.AspNetCore.Mvc;
using MokkilicoresExpress.Models;
using MokkilicoresExpress.Models.ViewModels;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Json;
using System.Threading.Tasks;
using System.Linq;

namespace MokkilicoresExpress.Controllers
{
    public class PedidoController : Controller
    {
        private readonly HttpClient _httpClient;
        private readonly ILogger<PedidoController> _logger;

        public PedidoController(IHttpClientFactory httpClientFactory, ILogger<PedidoController> logger)
        {
            _httpClient = httpClientFactory.CreateClient("ApiClient");
            _logger = logger;
        }

        public async Task<IActionResult> Index()
        {
            _logger.LogInformation("Obteniendo la lista de pedidos.");
            var pedidos = await _httpClient.GetFromJsonAsync<List<Pedido>>("/api/Pedido");
            
            var clienteIds = pedidos.Select(p => p.ClienteId).Distinct();
            var inventarioIds = pedidos.Select(p => p.InventarioId).Distinct();
            
            var clientes = await _httpClient.GetFromJsonAsync<List<Cliente>>($"/api/Cliente?ids={string.Join(",", clienteIds)}");
            var inventarios = await _httpClient.GetFromJsonAsync<List<Inventario>>($"/api/Inventario?ids={string.Join(",", inventarioIds)}");
            
            var viewModel = pedidos.Select(p => new PedidoDetailsViewModel
            {
                Pedido = p,
                Cliente = clientes.FirstOrDefault(c => c.Id == p.ClienteId),
                Inventario = inventarios.FirstOrDefault(i => i.Id == p.InventarioId)
            }).ToList();

            return View(viewModel);
        }

        public async Task<IActionResult> Create()
        {
            _logger.LogInformation("Cargando formulario para crear un nuevo pedido.");
            var clientes = await _httpClient.GetFromJsonAsync<List<Cliente>>("/api/Cliente");
            var inventarios = await _httpClient.GetFromJsonAsync<List<Inventario>>("/api/Inventario");

            var viewModel = new CreatePedidoViewModel
            {
                Clientes = clientes,
                Inventarios = inventarios,
                Pedido = new Pedido()
            };

            return View(viewModel);
        }

        [HttpPost]
        public async Task<IActionResult> Create(Pedido pedido)
        {
            _logger.LogInformation("Inicio del proceso de creación de un pedido.");
            _logger.LogDebug("Datos del pedido recibidos del formulario: {Pedido}", pedido);

            if (ModelState.IsValid)
            {
                _logger.LogInformation($"Intentando crear el pedido con Cliente ID: {pedido.ClienteId} y Inventario ID: {pedido.InventarioId}");
                var response = await _httpClient.PostAsJsonAsync("/api/Pedido", pedido);
                
                _logger.LogInformation($"Respuesta del servidor: {response.StatusCode}");
                if (response.IsSuccessStatusCode)
                {
                    _logger.LogInformation("Pedido creado con éxito, redirigiendo al índice.");
                    return RedirectToAction(nameof(Index));
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    _logger.LogError($"Error al crear pedido: {errorContent}");
                    ModelState.AddModelError("", $"Error al crear pedido: {errorContent}");
                }
            }
            else
            {
                _logger.LogWarning("Validación del modelo falló.");
                foreach (var error in ModelState.Values.SelectMany(v => v.Errors))
                {
                    _logger.LogWarning($"Error de Validación: {error.ErrorMessage}");
                }
            }

            _logger.LogInformation("Recargando datos para el formulario tras error.");
            var clientes = await _httpClient.GetFromJsonAsync<List<Cliente>>("/api/Cliente");
            var inventarios = await _httpClient.GetFromJsonAsync<List<Inventario>>("/api/Inventario");
            var viewModel = new CreatePedidoViewModel
            {
                Pedido = pedido,
                Clientes = clientes,
                Inventarios = inventarios
            };

            return View(viewModel);
        }

        public async Task<IActionResult> Details(int id)
        {
            _logger.LogInformation($"Obteniendo detalles del pedido con ID: {id}.");
            var pedido = await _httpClient.GetFromJsonAsync<Pedido>($"/api/Pedido/{id}");
            if (pedido == null)
            {
                _logger.LogWarning($"Pedido con ID: {id} no encontrado.");
                return NotFound();
            }

            var cliente = await _httpClient.GetFromJsonAsync<Cliente>($"/api/Cliente/{pedido.ClienteId}");
            var inventario = await _httpClient.GetFromJsonAsync<Inventario>($"/api/Inventario/{pedido.InventarioId}");

            var viewModel = new PedidoDetailsViewModel
            {
                Pedido = pedido,
                Cliente = cliente,
                Inventario = inventario
            };

            return View(viewModel);
        }

        public async Task<IActionResult> Edit(int id)
        {
            _logger.LogInformation($"Cargando información para editar el pedido con ID: {id}.");
            var pedido = await _httpClient.GetFromJsonAsync<Pedido>($"/api/Pedido/{id}");
            if (pedido == null)
            {
                _logger.LogWarning($"Pedido con ID: {id} no encontrado para editar.");
                return NotFound();
            }
            return View(pedido);
        }

        [HttpPost]
        public async Task<IActionResult> Edit(Pedido pedido)
        {
            _logger.LogInformation($"Editando el pedido con ID: {pedido.Id}.");
            var response = await _httpClient.PutAsJsonAsync($"/api/Pedido/{pedido.Id}", pedido);
            if (response.IsSuccessStatusCode)
            {
                _logger.LogInformation("Pedido editado con éxito.");
                return RedirectToAction(nameof(Index));
            }
            var errorContent = await response.Content.ReadAsStringAsync();
            _logger.LogError($"Error al editar pedido: {errorContent}");
            ModelState.AddModelError("", $"Error al editar pedido: {errorContent}");
            return View(pedido);
        }

        public async Task<IActionResult> Delete(int id)
        {
            _logger.LogInformation($"Eliminando pedido con ID: {id}.");
            var response = await _httpClient.DeleteAsync($"/api/Pedido/{id}");
            if (response.IsSuccessStatusCode)
            {
                _logger.LogInformation("Pedido eliminado con éxito.");
                return RedirectToAction(nameof(Index));
            }
            _logger.LogError("Error al eliminar pedido.");
            ModelState.AddModelError("", "Error al eliminar pedido");
            return RedirectToAction(nameof(Index));
        }

        public async Task<IActionResult> Search(string searchTerm)
        {
            _logger.LogInformation($"Buscando pedidos que coincidan con: {searchTerm}.");
            var pedidos = await _httpClient.GetFromJsonAsync<List<Pedido>>("/api/Pedido");
            var filteredPedidos = string.IsNullOrWhiteSpace(searchTerm) ? 
                pedidos : 
                pedidos.Where(p => p.InventarioId.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                   p.Estado.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

            _logger.LogInformation($"Se encontraron {filteredPedidos.Count} pedidos que coinciden con la búsqueda.");
            if (HttpContext.Request.Headers["X-Requested-With"] == "XMLHttpRequest")
            {
                return Json(filteredPedidos);
            }

            return View("Index", filteredPedidos);
        }
    }
}



Filename: ./Handlers/AuthenticationDelegatingHandler.cs
-----------------------------------
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;


namespace MokkilicoresExpress.Handlers
{
    public class AuthenticationDelegatingHandler : DelegatingHandler
    {
        private readonly IHttpContextAccessor _httpContextAccessor;

        public AuthenticationDelegatingHandler(IHttpContextAccessor httpContextAccessor)
        {
            _httpContextAccessor = httpContextAccessor;
        }

        protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
        {
            var jwtToken = _httpContextAccessor.HttpContext?.Request.Cookies["jwt"];
            if (!string.IsNullOrEmpty(jwtToken))
            {
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", jwtToken);
            }

            return base.SendAsync(request, cancellationToken);
        }
    }
}


Filename: ./Program.cs
-----------------------------------
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using MokkilicoresExpress.Handlers;  
using Microsoft.Extensions.Caching.Memory;
using Microsoft.Extensions.DependencyInjection;

var builder = WebApplication.CreateBuilder(args);

// Agregar servicios al contenedor de servicios
builder.Services.AddControllersWithViews();
builder.Services.AddRazorPages();

// Proveedores de logging
builder.Logging.ClearProviders();
builder.Logging.AddConsole();
builder.Logging.AddDebug();
builder.Logging.AddEventSourceLogger();

// Agregar servicio de memoria caché
builder.Services.AddMemoryCache();

// Configurar autenticación con JWT y Cookies
builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = CookieAuthenticationDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = CookieAuthenticationDefaults.AuthenticationScheme;
})
.AddJwtBearer(options =>
{
    options.RequireHttpsMetadata = false;
    options.SaveToken = true;
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuerSigningKey = true,
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes("mokkilicores-express-api-secret-key")),
        ValidateIssuer = false,
        ValidateAudience = false
    };
})
.AddCookie(CookieAuthenticationDefaults.AuthenticationScheme, options =>
{
    options.LoginPath = "/Account/Login";
    options.LogoutPath = "/Account/Logout";
    options.Cookie.HttpOnly = true;
    options.ExpireTimeSpan = TimeSpan.FromMinutes(60);
    options.SlidingExpiration = true;
});

// Servicio de acceso al contexto HTTP
builder.Services.AddHttpContextAccessor();

// Registrar el AuthenticationDelegatingHandler
builder.Services.AddTransient<AuthenticationDelegatingHandler>();

// Configurar HttpClient con BaseAddress y AuthenticationDelegatingHandler
var URI_ADDRESS = "http://localhost:5045";

builder.Services.AddHttpClient("ApiClient", client =>
{
    client.BaseAddress = new Uri(URI_ADDRESS);
    client.DefaultRequestHeaders.Accept.Clear();
    client.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
})
.AddHttpMessageHandler<AuthenticationDelegatingHandler>();

var app = builder.Build();

// Configuración de la aplicación
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}
else
{
    app.UseDeveloperExceptionPage();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();



